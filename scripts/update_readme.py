import os
import requests
from datetime import datetime, timedelta

GITHUB_TOKEN = os.getenv('GITHUB_TOKEN')
HEADERS = {'Authorization': f'token {GITHUB_TOKEN}'}


def format_time(dt):
    now = datetime.now()
    diff = now - dt
    if diff.days > 0:
        return f"{diff.days} –¥–Ω–µ–π –Ω–∞–∑–∞–¥"
    hours = diff.seconds // 3600
    if hours > 0:
        return f"{hours} —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥"
    return "—Ç–æ–ª—å–∫–æ —á—Ç–æ"


def get_last_activity():
    url = f"https://api.github.com/users/dmitrij-el/events/public"
    try:
        response = requests.get(url, headers=HEADERS)
        events = response.json()

        if not isinstance(events, list):
            return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"

        last_event = events[0]
        repo_name = last_event['repo']['name']
        event_type = last_event['type']
        created_at = datetime.strptime(last_event['created_at'], '%Y-%m-%dT%H:%M:%SZ')

        if event_type == 'PushEvent':
            commit_msg = last_event['payload']['commits'][0]['message']
            return f"üî® Pushed to [{repo_name}](https://github.com/{repo_name}): {commit_msg} ({format_time(created_at)})"
        elif event_type == 'PullRequestEvent':
            pr_action = last_event['payload']['action']
            return f"üîÄ PR {pr_action} in [{repo_name}](https://github.com/{repo_name}) ({format_time(created_at)})"
        else:
            return f"‚ö° Activity in [{repo_name}](https://github.com/{repo_name}): {event_type} ({format_time(created_at)})"

    except Exception as e:
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {str(e)}"


def update_readme():
    with open('README.md', 'r', encoding='utf-8') as f:
        content = f.read()

    new_content = content.replace(
        '<!-- –ó–¥–µ—Å—å –±—É–¥–µ—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç —á–µ—Ä–µ–∑ GitHub Actions -->',
        get_last_activity()
    )

    with open('README.md', 'w', encoding='utf-8') as f:
        f.write(new_content)


if __name__ == "__main__":
    update